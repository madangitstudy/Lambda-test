import json
import urllib.request

def lambda_handler(event, context):
    # Set API endpoint and endpoint token
    api_endpoint = "https://a.klaviyo.com/api/events/"
    endpoint_token = "Klaviyo-API-Key pk_8211f01bb2506425691699a26524fc4dbb"  # Your Klaviyo API key

    # Prepare the data payload
    payload = {
        "event": "OTPG voucher_email",
        "customer_properties": {
            "$email": "john.doe@example.com"  # Primary email (mandatory field)
        },
        "properties": {
            "flight_details": {
                "departure_city": "New York",
                "departure_airport_code": "JFK",
                "arrival_city": "Los Angeles",
                "arrival_airport_code": "LAX",
                "expected_arrival_time": "2023-07-26T12:00:00",
                "actual_arrival_time": "2023-07-26T13:00:00",
                "time_length_of_delay": 60,
                "flight_number": "AA101",
                "pnr_booking_id": "ABC123",
                "flight_status": "Delayed"
            },
            "passengers": [
                {
                    "first_name": "John",
                    "last_name": "Doe",
                    "voucher": {
                        "unique_voucher_code": "Voucher123",
                        "expiry_date": "2023-07-31",
                        "voucher_value": 50.00
                    }
                },
                {
                    "first_name": "Jane",
                    "last_name": "Doe",
                    "voucher": {
                        "unique_voucher_code": None,
                        "expiry_date": None,
                        "voucher_value": None
                    }
                }
            ]
        }
    }

    # Convert payload to JSON
    json_payload = json.dumps(payload).encode('utf-8')

    # Create request
    req = urllib.request.Request(api_endpoint, data=json_payload, method="POST")
    req.add_header("Klaviyo-API-Key", endpoint_token)  # Use Klaviyo-API-Key instead of Bearer
    req.add_header("Content-Type", "application/json")

    try:
        # Send the request
        with urllib.request.urlopen(req) as response:
            response_body = response.read()
            return {
                "statusCode": 200,
                "body": response_body.decode('utf-8')
            }
    except urllib.error.HTTPError as e:
        error_message = e.read().decode('utf-8')
        return {
            "statusCode": e.code,
            "body": error_message
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"Internal server error: {str(e)}"
        }
