import json
import urllib.request
import base64
import os
import boto3
import logging
from datetime import datetime, timedelta

# Initialize logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize DynamoDB client
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('VoucherDetails')

def lambda_handler(event, context):
    try:
        # Retrieve data from DynamoDB
        logger.info("Retrieving data from DynamoDB...")
        response = table.scan()
        retrieved_vouchers = response['Items']
        logger.info(f"Retrieved vouchers: {retrieved_vouchers}")

        # Placeholder for newly generated vouchers
        generated_vouchers = []

        # Logic to check for ungenerated vouchers and generate them
        for voucher in retrieved_vouchers:
            if 'VoucherCode' not in voucher or voucher['VoucherCode'] is None:
                # Generate the voucher
                new_voucher_code = generate_voucher_code()  # Implement your code generation logic here
                expiry_date = (datetime.utcnow() + timedelta(days=60)).strftime('%Y-%m-%d %H:%M:%S')

                # Update the DynamoDB entry
                table.update_item(
                    Key={'PNR': voucher['PNR']},
                    UpdateExpression='SET VoucherCode = :val1, VoucherExpiryDate = :val2',
                    ExpressionAttributeValues={
                        ':val1': new_voucher_code,
                        ':val2': expiry_date
                    }
                )

                # Add to generated vouchers list
                generated_vouchers.append({
                    'PNR': voucher['PNR'],
                    'VoucherCode': new_voucher_code,
                    'ExpiryDate': expiry_date
                })

        # Construct the response
        if generated_vouchers:
            return {
                'statusCode': 200,
                'body': json.dumps({
                    'message': 'Vouchers processed and updated.',
                    'generatedVouchers': generated_vouchers
                })
            }
        else:
            return {
                'statusCode': 200,
                'body': json.dumps({'message': 'No new vouchers to generate.'})
            }

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'Could not retrieve or process data from DynamoDB.'})
        }

def generate_voucher_code():
    # Implement your logic to generate a unique voucher code
    return "VOUCHER" + str(datetime.utcnow().timestamp())
