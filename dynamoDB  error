DynamoDB table-

PNR
- Partition key
HN6FG
String
VoucherID
- Sort key
none
String
ArrivalAirportCode
ENO
String
Remove
ArrivalCity
SZK
String
Remove
DepartureAirportCode
NAU
String
Remove
DepartureCity
6BK
String
Remove
FlightNumber
5N5915
String
Remove
FlightStatus
Cancelled
String
Remove
PassengerFirstName
David
String
Remove
PassengerLastName
Jones
String
Remove
personalIdentificationNumber
null
String
Remove
VoucherCode
XLFS0AVL
String
Remove
VoucherExpiryDate
2024-11-04
String
Remove
VoucherValue
$63CAD
String
Remove
Cancel
Save
Save and close

Lambda function 
import json
import urllib.request
import base64
import os
import boto3
from datetime import datetime, timedelta
from botocore.exceptions import ClientError

def lambda_handler(event, context):
    # Initialize DynamoDB client
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('VoucherDetails')  # Your DynamoDB table name

    # Query DynamoDB to find vouchers that need to be generated
    vouchers_to_generate = []
    
    try:
        response = table.scan()  # Consider using query for more specific results
        items = response.get('Items', [])
        
        for item in items:
            # Check if voucher code or ID is not set
            if not item.get('VoucherID'):
                vouchers_to_generate.append(item)

    except ClientError as e:
        print(f"Error retrieving data: {e.response['Error']['Message']}")
        return {
            'statusCode': 500,
            'body': json.dumps({"error": "Could not retrieve data from DynamoDB."})
        }
    
    # Define the URL for the API
    url = "https://flairair-api.intelisystraining.ca/RESTv1/vouchers/Generate?fields={fields}"

    # Define the expiry date (60 days from now) and format it as 'YYYY-MM-DD HH:mm:ss'
    expiry_date = (datetime.utcnow() + timedelta(days=60)).strftime('%Y-%m-%d %H:%M:%S')

    # Process each voucher that needs to be generated
    generated_vouchers = []
    for voucher in vouchers_to_generate:
        payload = {
            "voucherType": {
                "href": "/voucherTypes/a%C6%92Jj2ImKybdP8tQcem2rUrd3sa66LEFx%C2%A5BLJTdx9on4=",
                "key": os.environ['VOUCHER_KEY'],
                "name": "Late Arrival"
            },
            "generationNumber": 2,
            "password": None,
            "personalIdentificationNumber": None,
            "autoGeneratePersonalIdentificationNumber": {
                "length": 4
            },
            "autoGeneratePassword": {
                "length": 6
            },
            "expiryDate": expiry_date,
            "available": 20,
            "reason": "Sample reason for generating this voucher",
            "bookingWindow": "none",
            "voucherValue": 60,
            "eligiblePassengers": [
                {
                    "firstName": voucher['PassengerFirstName'],
                    "lastName": voucher['PassengerLastName'],
                    "pnr": voucher['PNR']
                }
            ]
        }
        
        # Create a request object
        req = urllib.request.Request(url, data=json.dumps(payload).encode('utf-8'), method='POST')
        req.add_header('Content-Type', 'application/json')

        # Add Basic Authentication
        username = os.environ['USERNAME']
        password = os.environ['PASSWORD']
        credentials = f"{username}:{password}"
        b64_credentials = base64.b64encode(credentials.encode()).decode()
        req.add_header('Authorization', f'Basic {b64_credentials}')

        try:
            # Make the API request
            with urllib.request.urlopen(req) as response:
                response_body = response.read()
                response_data = json.loads(response_body)
                generated_vouchers.append({
                    'VoucherID': response_data[0]['key'],  # Example of how to extract the VoucherID
                    'VoucherCode': response_data[0]['serialNumber'],  # Example of how to extract the VoucherCode
                    'VoucherExpiryDate': expiry_date
                })

        except urllib.error.HTTPError as e:
            error_message = e.read().decode('utf-8')
            print(f"Error generating voucher: {error_message}")

    # Update DynamoDB with generated vouchers
    for voucher in generated_vouchers:
        try:
            table.update_item(
                Key={
                    'PNR': voucher['PNR']  # Adjust the key according to your primary key
                },
                UpdateExpression="SET VoucherID = :vid, VoucherCode = :vcode, VoucherExpiryDate = :vexp",
                ExpressionAttributeValues={
                    ':vid': voucher['VoucherID'],
                    ':vcode': voucher['VoucherCode'],
                    ':vexp': voucher['VoucherExpiryDate']
                }
            )
        except ClientError as e:
            print(f"Error updating voucher in DynamoDB: {e.response['Error']['Message']}")

    return {
        'statusCode': 200,
        'body': json.dumps({"message": "Vouchers processed and updated."})
    }

Response-
Test Event Name
test1

Response
{
  "statusCode": 200,
  "body": "{\"message\": \"Vouchers processed and updated.\"}"
}

Function Logs
START RequestId: 497c5d2b-b00e-4e37-8364-1dba0853e18c Version: $LATEST
END RequestId: 497c5d2b-b00e-4e37-8364-1dba0853e18c
REPORT RequestId: 497c5d2b-b00e-4e37-8364-1dba0853e18c	Duration: 2539.77 ms	Billed Duration: 2540 ms	Memory Size: 128 MB	Max Memory Used: 78 MB	Init Duration: 271.00 ms
