import json
import boto3
import urllib.parse
import urllib.request
from datetime import datetime, timedelta

dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('VoucherDetails')

def lambda_handler(event, context):
    # Extract the ID from the event
    id_value = event['id']
    print(f"ID value received: {id_value}")

    # Fetch the item from DynamoDB
    response = table.get_item(Key={'ID': id_value})
    item = response.get('Item')

    if not item:
        return {
            "statusCode": 404,
            "body": "Item not found."
        }

    print(f"DynamoDB response: {response}")

    # Fetch the email; for testing, we'll use a dummy email if it's None
    email = item.get('Email')
    if not email:
        email = "dummy@example.com"  # Dummy email for testing
        print("Email not found in DynamoDB. Using dummy email for testing.")

    # Prepare payload for Klaviyo
    payload = {
        "data": {
            "type": "event",
            "attributes": {
                "profile": {
                    "data": {
                        "type": "profile",
                        "attributes": {
                            "email": email
                        }
                    }
                },
                "metric": {
                    "data": {
                        "type": "metric",
                        "attributes": {
                            "name": "OTPG voucher_email"
                        }
                    }
                },
                "properties": {
                    "flight_details": {
                        "actual_arrival_time": item.get('ActualArrivalTime'),
                        "expected_arrival_time": item.get('ExpectedArrivalTime'),
                        "pnr_booking_id": id_value,
                        "time_length_of_delay": item.get('TimeLengthOfDelay')
                    },
                    "passengers": [
                        {
                            "first_name": item.get('PassengerFirstName'),
                            "last_name": item.get('PassengerLastName'),
                            "passenger_type": "adult",
                            "voucher": {
                                "expiry_date": item.get('VoucherExpiryDate'),
                                "unique_voucher_code": item.get('VoucherCode'),
                                "voucher_value": item.get('VoucherValue')
                            }
                        },
                        {
                            "first_name": "Unknown",  # Example value
                            "last_name": "Unknown",    # Example value
                            "passenger_type": "child",
                            "voucher": {
                                "expiry_date": None,
                                "unique_voucher_code": None,
                                "voucher_value": None,
                                "message": "Passenger must be over 18 years old"
                            }
                        }
                    ]
                }
            }
        }
    }

    # Prepare the request to Klaviyo
    klaviyo_url = "https://a.klaviyo.com/api/events/"
    klaviyo_api_key = "YOUR_KLAVIYO_API_KEY"  # Replace with your actual API key
    headers = {
        "Authorization": f"Klaviyo-API-Key {klaviyo_api_key}",
        "Content-Type": "application/json",
        "Revision": "2023-01-01"  # Replace with the appropriate revision date
    }

    # Debugging output
    print(f"Sending request to Klaviyo with headers: {headers}")
    print(f"Payload: {json.dumps(payload)}")

    # Make the request using urllib
    try:
        req = urllib.request.Request(
            klaviyo_url,
            data=json.dumps(payload).encode('utf-8'),
            headers=headers
        )
        with urllib.request.urlopen(req) as response:
            response_body = response.read()
            print(f"Klaviyo response: {response_body.decode('utf-8')}")

    except urllib.error.HTTPError as e:
        print(f"HTTP Error: {e.code} - {e.reason}")
        return {
            "statusCode": e.code,
            "body": f"Failed to send notification: {e.reason}"
        }
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return {
            "statusCode": 500,
            "body": "An error occurred while processing the request."
        }

    return {
        "statusCode": 200,
        "body": "Event processed successfully."
    }
