import json
import boto3
from botocore.exceptions import ClientError

# Initialize the DynamoDB client
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('VoucherDetails')

def lambda_handler(event, context):
    # Get the ID value from the event
    id_value = event.get("ID")  # Change from "PNR" to "ID"

    if not id_value:
        return {
            "statusCode": 400,
            "body": json.dumps("ID value not provided in the event")
        }
    
    try:
        # Fetching the item using the correct key
        response = table.get_item(
            Key={
                'ID': id_value  # Make sure this matches your DynamoDB schema
            }
        )

        # Check if the item exists
        if 'Item' not in response:
            return {
                "statusCode": 404,
                "body": json.dumps("No item found with the provided ID")
            }

        item = response['Item']
        print("DynamoDB response:", item)

        # Process the item and send notification
        email = item.get('Email')
        if not email:
            print("Email not found in DynamoDB. Using dummy email for testing.")
            email = "dummy@example.com"  # Replace with a valid email if necessary

        # Create payload for Klaviyo
        payload = {
            "data": {
                "type": "event",
                "attributes": {
                    "profile": {
                        "data": {
                            "type": "profile",
                            "attributes": {
                                "email": email
                            }
                        }
                    },
                    "metric": {
                        "data": {
                            "type": "metric",
                            "attributes": {
                                "name": "OTPG voucher_email"
                            }
                        }
                    },
                    "properties": {
                        "flight_details": {
                            "actual_arrival_time": None,
                            "expected_arrival_time": None,
                            "pnr_booking_id": item['ID'],
                            "time_length_of_delay": None
                        },
                        "passengers": [
                            {
                                "first_name": item['PassengerFirstName'],
                                "last_name": item['PassengerLastName'],
                                "passenger_type": "adult",
                                "voucher": {
                                    "expiry_date": item['VoucherExpiryDate'],
                                    "unique_voucher_code": item['VoucherCode'],
                                    "voucher_value": item['VoucherValue']
                                }
                            },
                            {
                                "first_name": "Unknown",
                                "last_name": "Unknown",
                                "passenger_type": "child",
                                "voucher": {
                                    "expiry_date": None,
                                    "unique_voucher_code": None,
                                    "voucher_value": None,
                                    "message": "Passenger must be over 18 years old"
                                }
                            }
                        ]
                    }
                }
            }
        }

        # Log the payload
        print("Payload:", json.dumps(payload))

        # Call the Klaviyo notification function
        klaviyo_response = invoke_klaviyo_notifier(payload)

        return {
            "statusCode": 200,
            "body": json.dumps("Notification sent successfully.")
        }

    except ClientError as e:
        return {
            "statusCode": 500,
            "body": json.dumps(f"Error fetching voucher details: {e.response['Error']['Message']}")
        }

def invoke_klaviyo_notifier(payload):
    # Invoke the Klaviyo notifier Lambda function
    lambda_client = boto3.client('lambda')
    
    try:
        response = lambda_client.invoke(
            FunctionName='KlaviyoNotifier',  # Update this with your actual function name
            InvocationType='RequestResponse',
            Payload=json.dumps(payload)
        )

        response_payload = json.loads(response['Payload'].read())
        return response_payload

    except ClientError as e:
        print(f"Failed to send notification: {e}")
        raise
