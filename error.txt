import json
import urllib.request
import boto3
from datetime import datetime, timedelta

# Initialize DynamoDB client
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('VoucherDetails')

def lambda_handler(event, context):
    # Log the incoming event for debugging
    print("Received event:", json.dumps(event))
    
    # Extract the ID from the event
    id_value = event.get('id', None)  # You should get the actual ID value here
    if not id_value:
        return {
            "statusCode": 400,
            "body": "ID value is missing from the event input."
        }

    # Query DynamoDB using the provided ID
    try:
        # Querying DynamoDB for an item with the given ID
        response = table.get_item(Key={'ID': id_value})

        voucher_details = response.get('Item')

        if not voucher_details:
            return {
                "statusCode": 404,
                "body": f"No data found for ID: {id_value}"
            }

        # Extract relevant details from DynamoDB
        email = voucher_details.get('Email')  # Get email from DynamoDB
        voucher_code = voucher_details.get('VoucherCode')  # Get voucher code from DynamoDB
        voucher_expiry_date = voucher_details.get('VoucherExpiryDate')  # Get expiry date from DynamoDB
        voucher_value = voucher_details.get('VoucherValue')  # Get voucher value from DynamoDB
        first_name = voucher_details.get('PassengerFirstName')  # Get first name from DynamoDB
        last_name = voucher_details.get('PassengerLastName')  # Get last name from DynamoDB

        # Check if child passenger details exist in DynamoDB
        child_first_name = voucher_details.get('ChildPassengerFirstName', None)
        child_last_name = voucher_details.get('ChildPassengerLastName', None)

        # Set expiry date to 60 days from today if not already set
        if not voucher_expiry_date:
            voucher_expiry_date = (datetime.utcnow() + timedelta(days=60)).strftime('%Y-%m-%d')

    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"Error fetching data from DynamoDB: {str(e)}"
        }

    # Prepare the data payload for Klaviyo
    payload = {
        "data": {
            "type": "event",
            "attributes": {
                "profile": {
                    "data": {
                        "type": "profile",
                        "attributes": {
                            "email": email  # Updated email field from DynamoDB
                        }
                    }
                },
                "metric": {
                    "data": {
                        "type": "metric",
                        "attributes": {
                            "name": "OTPG voucher_email"  # Event name
                        }
                    }
                },
                "properties": {
                    "flight_details": {
                        "actual_arrival_time": "2023-07-26T13:00:00",  # Keep as is
                        "expected_arrival_time": "2023-07-26T12:00:00",  # Keep as is
                        "pnr_booking_id": id_value,  # Updated to use ID/PNR from DynamoDB
                        "time_length_of_delay": 60  # Keep as is
                    },
                    "passengers": [
                        {
                            "first_name": first_name,  # Updated from DynamoDB for adult
                            "last_name": last_name,    # Updated from DynamoDB for adult
                            "passenger_type": "adult",  # Keep as is
                            "voucher": {
                                "expiry_date": voucher_expiry_date,  # Updated expiry date from DynamoDB
                                "unique_voucher_code": voucher_code,  # Updated voucher code from DynamoDB
                                "voucher_value": voucher_value  # Updated voucher value from DynamoDB
                            }
                        },
                        {
                            "first_name": child_first_name if child_first_name else "Unknown",  # Get child name or default
                            "last_name": child_last_name if child_last_name else "Unknown",    # Get child last name or default
                            "passenger_type": "child",  # Keep as is
                            "voucher": {
                                "expiry_date": voucher_expiry_date,  # Set same expiry date as adult passenger
                                "unique_voucher_code": f"CHILD-{voucher_code}",  # Modify voucher code for child
                                "voucher_value": voucher_value / 2,  # Set child voucher value to half of adult
                                "message": "Passenger must be over 18 years old"  # Keep message as is
                            }
                        }
                    ]
                }
            }
        }
    }

    # Convert payload to JSON
    json_payload = json.dumps(payload).encode('utf-8')

    # Set API endpoint
    api_endpoint = "https://a.klaviyo.com/api/events/"
    endpoint_token = "Klaviyo-API-Key pk_c1031f8fd7cae03b92be86f68eb85bf2f4"  # Ensure this is the correct key
    revision_date = "2023-10-10"  # Set the required revision date

    # Create request
    req = urllib.request.Request(api_endpoint, data=json_payload, method="POST")
    req.add_header("Authorization", endpoint_token)  # Use "Authorization" header
    req.add_header("Content-Type", "application/json")
    req.add_header("REVISION", revision_date)  # Add the required REVISION header

    try:
        # Send the request
        with urllib.request.urlopen(req) as response:
            response_body = response.read()
            return {
                "statusCode": 200,
                "body": response_body.decode('utf-8')
            }
    except urllib.error.HTTPError as e:
        error_message = e.read().decode('utf-8')
        return {
            "statusCode": e.code,
            "body": error_message
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": f"Internal server error: {str(e)}"
        }
