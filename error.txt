import json
import urllib.request
import datetime

def generate_voucher(pnr, first_name, last_name):
    # Set API endpoint and credentials
    api_endpoint = "https://flairair-api.intelisystraining.ca/RESTv1/vouchers/Generate?fields"
    api_key = "aƒJj2ImKybdP8tQcem2rUqODpzveNdvDKwoL3l¥DYg8="  # Ensure this is valid

    # Set request body
    expiry_date = (datetime.date.today() + datetime.timedelta(days=30)).strftime("%Y-%m-%dT00:00:00")
    request_body = {
        "fields": {
            "type": "voucher",
            "fields": {
                "VoucherType": "your_voucher_type",  # Replace with your valid voucher type
                "name": {
                    "first_name": first_name,
                    "last_name": last_name
                },
                "value": 60.0,
                "currency": "CAD",
                "expiry_date": expiry_date,
                "applicable_to": "base_fare",
                "pnr": pnr
            }
        }
    }

    # Convert request body to JSON string and encode in UTF-8
    request_data = json.dumps(request_body).encode('utf-8')

    # Set API headers
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json; charset=UTF-8"  # Specify UTF-8
    }

    # Create the request
    req = urllib.request.Request(api_endpoint, data=request_data, headers=headers)

    # Send API request
    try:
        with urllib.request.urlopen(req) as response:
            response_data = response.read().decode('utf-8')
            print("Voucher generated successfully")
            return json.loads(response_data)
    except urllib.error.HTTPError as e:
        print(f"HTTP error: {e.code} - {e.reason}")
    except urllib.error.URLError as e:
        print(f"URL error: {e.reason}")
    except Exception as e:
        print(f"Unexpected error: {str(e)}")

def lambda_handler(event, context):
    # Extract parameters from the event
    pnr = event.get('pnr')  # Use .get() to avoid KeyError
    first_name = event.get('first_name')
    last_name = event.get('last_name')

    if not pnr or not first_name or not last_name:
        return {
            'statusCode': 400,
            'body': 'Missing required parameters: pnr, first_name, last_name'
        }

    # Proceed with voucher generation
    voucher_response = generate_voucher(pnr, first_name, last_name)
    return {
        'statusCode': 200,
        'body': voucher_response
    }
